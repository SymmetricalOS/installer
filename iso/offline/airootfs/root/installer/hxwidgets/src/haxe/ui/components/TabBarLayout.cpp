// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_components_TabBarLayout
#include <haxe/ui/components/TabBarLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_components__TabBar_TabBarButton
#include <haxe/ui/components/_TabBar/TabBarButton.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IValueComponent
#include <haxe/ui/core/IValueComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Size
#include <haxe/ui/geom/Size.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_DefaultLayout
#include <haxe/ui/layouts/DefaultLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e53d89dc518a20b_40_new,"haxe.ui.components.TabBarLayout","new",0x3fc59560,"haxe.ui.components.TabBarLayout.new","haxe/ui/components/TabBar.hx",40,0xaabf3019)
HX_LOCAL_STACK_FRAME(_hx_pos_8e53d89dc518a20b_45_repositionChildren,"haxe.ui.components.TabBarLayout","repositionChildren",0x741adbbb,"haxe.ui.components.TabBarLayout.repositionChildren","haxe/ui/components/TabBar.hx",45,0xaabf3019)
HX_LOCAL_STACK_FRAME(_hx_pos_8e53d89dc518a20b_86_calcAutoSize,"haxe.ui.components.TabBarLayout","calcAutoSize",0x15ed1c85,"haxe.ui.components.TabBarLayout.calcAutoSize","haxe/ui/components/TabBar.hx",86,0xaabf3019)
namespace haxe{
namespace ui{
namespace components{

void TabBarLayout_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_8e53d89dc518a20b_40_new)
HXLINE(  41)		super::__construct();
HXLINE(  42)		this->_roundFullWidths = true;
            	}

Dynamic TabBarLayout_obj::__CreateEmpty() { return new TabBarLayout_obj; }

void *TabBarLayout_obj::_hx_vtable = 0;

Dynamic TabBarLayout_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TabBarLayout_obj > _hx_result = new TabBarLayout_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TabBarLayout_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x23db4184) {
		if (inClassId<=(int)0x21bb26dc) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x21bb26dc;
		} else {
			return inClassId==(int)0x23db4184;
		}
	} else {
		return inClassId==(int)0x3799f835;
	}
}

void TabBarLayout_obj::repositionChildren(){
            	HX_STACKFRAME(&_hx_pos_8e53d89dc518a20b_45_repositionChildren)
HXLINE(  46)		this->super::repositionChildren();
HXLINE(  48)		 ::haxe::ui::containers::Box filler = this->_component->findComponent(HX_("tabbar-filler",bf,e2,cc,b0),null(),false,null()).StaticCast<  ::haxe::ui::containers::Box >();
HXLINE(  49)		 ::haxe::ui::containers::Box container = this->_component->findComponent(HX_("tabbar-contents",e9,7b,ac,dd),null(),false,null()).StaticCast<  ::haxe::ui::containers::Box >();
HXLINE(  50)		if (::hx::IsNotNull( filler )) {
HXLINE(  51)			 ::Dynamic _hx_tmp = this->_component->get_width();
HXDLIN(  51)			filler->set_width((( (Float)(_hx_tmp) ) - ( (Float)(container->get_width()) )));
HXLINE(  52)			filler->set_height(this->_component->get_height());
HXLINE(  53)			filler->set_left(container->get_width());
            		}
HXLINE(  56)		Float max = ( (Float)(0) );
HXLINE(  57)		{
HXLINE(  57)			int _g = 0;
HXDLIN(  57)			::Array< ::Dynamic> _g1;
HXDLIN(  57)			if (::hx::IsNull( container->_children )) {
HXLINE(  57)				_g1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE(  57)				_g1 = container->_children;
            			}
HXDLIN(  57)			while((_g < _g1->length)){
HXLINE(  57)				 ::haxe::ui::core::Component button = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN(  57)				_g = (_g + 1);
HXLINE(  58)				button->syncComponentValidation(null());
HXLINE(  59)				if (::hx::IsGreater( button->get_height(),max )) {
HXLINE(  60)					max = ( (Float)(button->get_height()) );
            				}
            			}
            		}
HXLINE(  63)		if ((max > 0)) {
HXLINE(  64)			int _g2 = 0;
HXDLIN(  64)			::Array< ::Dynamic> _g3;
HXDLIN(  64)			if (::hx::IsNull( container->_children )) {
HXLINE(  64)				_g3 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE(  64)				_g3 = container->_children;
            			}
HXDLIN(  64)			while((_g2 < _g3->length)){
HXLINE(  64)				 ::haxe::ui::core::Component button1 = _g3->__get(_g2).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN(  64)				_g2 = (_g2 + 1);
HXLINE(  65)				button1->set_height(max);
            			}
            		}
HXLINE(  69)		 ::haxe::ui::components::Button left = this->_component->findComponent(HX_("tabbar-scroll-left",18,70,e0,85),null(),false,null()).StaticCast<  ::haxe::ui::components::Button >();
HXLINE(  70)		 ::haxe::ui::components::Button right = this->_component->findComponent(HX_("tabbar-scroll-right",ab,b2,8e,15),null(),false,null()).StaticCast<  ::haxe::ui::components::Button >();
HXLINE(  71)		bool _hx_tmp1;
HXDLIN(  71)		if (::hx::IsNotNull( left )) {
HXLINE(  71)			_hx_tmp1 = (this->hidden(left) == false);
            		}
            		else {
HXLINE(  71)			_hx_tmp1 = false;
            		}
HXDLIN(  71)		if (_hx_tmp1) {
HXLINE(  72)			 ::Dynamic x = this->_component->get_width();
HXDLIN(  72)			Float x1 = (( (Float)(x) ) - ( (Float)(left->get_width()) ));
HXLINE(  73)			if (::hx::IsNotNull( right )) {
HXLINE(  74)				x1 = (x1 - ( (Float)(right->get_width()) ));
            			}
HXLINE(  76)			left->set_left((x1 + 1));
HXLINE(  77)			Float _hx_tmp2 = (( (Float)(this->_component->get_height()) ) / ( (Float)(2) ));
HXDLIN(  77)			left->set_top((_hx_tmp2 - (( (Float)(left->get_height()) ) / ( (Float)(2) ))));
            		}
HXLINE(  80)		bool _hx_tmp3;
HXDLIN(  80)		if (::hx::IsNotNull( right )) {
HXLINE(  80)			_hx_tmp3 = (this->hidden(right) == false);
            		}
            		else {
HXLINE(  80)			_hx_tmp3 = false;
            		}
HXDLIN(  80)		if (_hx_tmp3) {
HXLINE(  81)			 ::Dynamic _hx_tmp4 = this->_component->get_width();
HXDLIN(  81)			right->set_left((( (Float)(_hx_tmp4) ) - ( (Float)(right->get_width()) )));
HXLINE(  82)			Float _hx_tmp5 = (( (Float)(this->_component->get_height()) ) / ( (Float)(2) ));
HXDLIN(  82)			right->set_top((_hx_tmp5 - (( (Float)(right->get_height()) ) / ( (Float)(2) ))));
            		}
            	}


 ::haxe::ui::geom::Size TabBarLayout_obj::calcAutoSize(::Array< ::Dynamic> exclusions){
            	HX_STACKFRAME(&_hx_pos_8e53d89dc518a20b_86_calcAutoSize)
HXLINE(  87)		 ::haxe::ui::geom::Size size = this->super::calcAutoSize(null());
HXLINE(  88)		Float max = ( (Float)(0) );
HXLINE(  89)		{
HXLINE(  89)			int _g = 0;
HXDLIN(  89)			::Array< ::Dynamic> _g1 = this->_component->findComponents(null(),::hx::ClassOf< ::haxe::ui::components::_TabBar::TabBarButton >(),null());
HXDLIN(  89)			while((_g < _g1->length)){
HXLINE(  89)				 ::haxe::ui::components::_TabBar::TabBarButton b = _g1->__get(_g).StaticCast<  ::haxe::ui::components::_TabBar::TabBarButton >();
HXDLIN(  89)				_g = (_g + 1);
HXLINE(  90)				if (::hx::IsGreater( b->get_height(),max )) {
HXLINE(  91)					max = ( (Float)(b->get_height()) );
            				}
            			}
            		}
HXLINE(  94)		size->height = max;
HXLINE(  95)		return size;
            	}



::hx::ObjectPtr< TabBarLayout_obj > TabBarLayout_obj::__new() {
	::hx::ObjectPtr< TabBarLayout_obj > __this = new TabBarLayout_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TabBarLayout_obj > TabBarLayout_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TabBarLayout_obj *__this = (TabBarLayout_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TabBarLayout_obj), true, "haxe.ui.components.TabBarLayout"));
	*(void **)__this = TabBarLayout_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TabBarLayout_obj::TabBarLayout_obj()
{
}

::hx::Val TabBarLayout_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"calcAutoSize") ) { return ::hx::Val( calcAutoSize_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"repositionChildren") ) { return ::hx::Val( repositionChildren_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TabBarLayout_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TabBarLayout_obj_sStaticStorageInfo = 0;
#endif

static ::String TabBarLayout_obj_sMemberFields[] = {
	HX_("repositionChildren",bb,00,c7,9c),
	HX_("calcAutoSize",85,81,3f,fd),
	::String(null()) };

::hx::Class TabBarLayout_obj::__mClass;

void TabBarLayout_obj::__register()
{
	TabBarLayout_obj _hx_dummy;
	TabBarLayout_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components.TabBarLayout",6e,a5,bf,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TabBarLayout_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TabBarLayout_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TabBarLayout_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TabBarLayout_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
