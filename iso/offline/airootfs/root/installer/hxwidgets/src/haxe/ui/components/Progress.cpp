// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviour
#include <haxe/ui/behaviours/Behaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_Behaviours
#include <haxe/ui/behaviours/Behaviours.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_DefaultBehaviour
#include <haxe/ui/behaviours/DefaultBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_behaviours_ValueBehaviour
#include <haxe/ui/behaviours/ValueBehaviour.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Progress
#include <haxe/ui/components/Progress.h>
#endif
#ifndef INCLUDED_haxe_ui_components_ProgressBuilder
#include <haxe/ui/components/ProgressBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Range
#include <haxe/ui/components/Range.h>
#endif
#ifndef INCLUDED_haxe_ui_components_RangeBuilder
#include <haxe/ui/components/RangeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Progress_Indeterminate
#include <haxe/ui/components/_Progress/Indeterminate.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Progress_Min
#include <haxe/ui/components/_Progress/Min.h>
#endif
#ifndef INCLUDED_haxe_ui_components__Progress_Pos
#include <haxe/ui/components/_Progress/Pos.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IValueComponent
#include <haxe/ui/core/IValueComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_util__Variant_Variant_Impl_
#include <haxe/ui/util/_Variant/Variant_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1fc04db343474ce8_20_new,"haxe.ui.components.Progress","new",0x9d8390c5,"haxe.ui.components.Progress.new","haxe/ui/components/Progress.hx",20,0x4b000a8a)
static const ::String _hx_array_data_3758ca53_1[] = {
	HX_("min",92,11,53,00),HX_("max",a4,0a,53,00),HX_("pos",94,5d,55,00),HX_("indeterminate",fb,f6,49,0e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1fc04db343474ce8_56_get_cssName,"haxe.ui.components.Progress","get_cssName",0x2ced4d2a,"haxe.ui.components.Progress.get_cssName","haxe/ui/components/Progress.hx",56,0x4b000a8a)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_193_registerComposite,"haxe.ui.components.Progress","registerComposite",0x2f05ac49,"haxe.ui.components.Progress.registerComposite","haxe/ui/macros/Macros.hx",193,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_522_registerBehaviours,"haxe.ui.components.Progress","registerBehaviours",0x78f02114,"haxe.ui.components.Progress.registerBehaviours","haxe/ui/macros/Macros.hx",522,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_566_get_indeterminate,"haxe.ui.components.Progress","get_indeterminate",0x453fc977,"haxe.ui.components.Progress.get_indeterminate","haxe/ui/macros/Macros.hx",566,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_613_set_indeterminate,"haxe.ui.components.Progress","set_indeterminate",0x68ada183,"haxe.ui.components.Progress.set_indeterminate","haxe/ui/macros/Macros.hx",613,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_566_get_pos,"haxe.ui.components.Progress","get_pos",0x9e527d10,"haxe.ui.components.Progress.get_pos","haxe/ui/macros/Macros.hx",566,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_583_set_pos,"haxe.ui.components.Progress","set_pos",0x91540e1c,"haxe.ui.components.Progress.set_pos","haxe/ui/macros/Macros.hx",583,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_689_get_value,"haxe.ui.components.Progress","get_value",0x20d975ed,"haxe.ui.components.Progress.get_value","haxe/ui/macros/Macros.hx",689,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_707_set_value,"haxe.ui.components.Progress","set_value",0x042a61f9,"haxe.ui.components.Progress.set_value","haxe/ui/macros/Macros.hx",707,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_a1772851c9fd4503_651_cloneComponent,"haxe.ui.components.Progress","cloneComponent",0x4c45695b,"haxe.ui.components.Progress.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",651,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_e44bd98550140bda_493_self,"haxe.ui.components.Progress","self",0x38e92387,"haxe.ui.components.Progress.self","haxe/ui/macros/Macros.hx",493,0x27866361)
namespace haxe{
namespace ui{
namespace components{

void Progress_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1fc04db343474ce8_20_new)
HXLINE(  21)		super::__construct();
HXLINE(  22)		this->behaviours->set_updateOrder(::Array_obj< ::String >::fromData( _hx_array_data_3758ca53_1,4));
            	}

Dynamic Progress_obj::__CreateEmpty() { return new Progress_obj; }

void *Progress_obj::_hx_vtable = 0;

Dynamic Progress_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Progress_obj > _hx_result = new Progress_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Progress_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2ccba775) {
		if (inClassId<=(int)0x1395e371) {
			if (inClassId<=(int)0x0eaf7545) {
				if (inClassId<=(int)0x01557b4b) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x01557b4b;
				} else {
					return inClassId==(int)0x0eaf7545;
				}
			} else {
				return inClassId==(int)0x0f2dd418 || inClassId==(int)0x1395e371;
			}
		} else {
			if (inClassId<=(int)0x241b0321) {
				return inClassId==(int)0x13d76ae7 || inClassId==(int)0x241b0321;
			} else {
				return inClassId==(int)0x2ccba775;
			}
		}
	} else {
		if (inClassId<=(int)0x715d6dae) {
			if (inClassId<=(int)0x4c0b8d25) {
				if (inClassId<=(int)0x4ba87886) {
					return inClassId==(int)0x395782b4 || inClassId==(int)0x4ba87886;
				} else {
					return inClassId==(int)0x4c0b8d25;
				}
			} else {
				return inClassId==(int)0x715d6dae;
			}
		} else {
			return inClassId==(int)0x72c347e4 || inClassId==(int)0x7ec24579;
		}
	}
}

static ::haxe::ui::core::IDirectionalComponent_obj _hx_haxe_ui_components_Progress__hx_haxe_ui_core_IDirectionalComponent= {
};

static ::haxe::ui::core::IValueComponent_obj _hx_haxe_ui_components_Progress__hx_haxe_ui_core_IValueComponent= {
	(  ::Dynamic (::hx::Object::*)())&::haxe::ui::components::Progress_obj::get_value,
	(  ::Dynamic (::hx::Object::*)( ::Dynamic))&::haxe::ui::components::Progress_obj::set_value,
};

void *Progress_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4b5f75e3: return &_hx_haxe_ui_components_Progress__hx_haxe_ui_core_IDirectionalComponent;
		case (int)0x9229be7c: return &_hx_haxe_ui_components_Progress__hx_haxe_ui_core_IValueComponent;
	}
	return super::_hx_getInterface(inHash);
}

::String Progress_obj::get_cssName(){
            	HX_STACKFRAME(&_hx_pos_1fc04db343474ce8_56_get_cssName)
HXDLIN(  56)		return HX_("progress",ad,f7,2a,86);
            	}


void Progress_obj::registerComposite(){
            	HX_STACKFRAME(&_hx_pos_e44bd98550140bda_193_registerComposite)
HXLINE( 194)		this->super::registerComposite();
HXLINE( 206)		this->_compositeBuilderClass = ::hx::ClassOf< ::haxe::ui::components::ProgressBuilder >();
            	}


void Progress_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_e44bd98550140bda_522_registerBehaviours)
HXLINE( 523)		this->super::registerBehaviours();
HXLINE( 632)		this->behaviours->_hx_register(HX_("indeterminate",fb,f6,49,0e),::hx::ClassOf< ::haxe::ui::components::_Progress::Indeterminate >(),null());
HXDLIN( 632)		this->behaviours->_hx_register(HX_("pos",94,5d,55,00),::hx::ClassOf< ::haxe::ui::components::_Progress::Pos >(),null());
HXDLIN( 632)		this->behaviours->_hx_register(HX_("min",92,11,53,00),::hx::ClassOf< ::haxe::ui::components::_Progress::Min >(),null());
            	}


bool Progress_obj::get_indeterminate(){
            	HX_STACKFRAME(&_hx_pos_e44bd98550140bda_566_get_indeterminate)
HXLINE( 567)		if (::hx::IsNull( this->behaviours )) {
HXLINE( 568)			return false;
            		}
HXLINE( 570)		return ::haxe::ui::util::_Variant::Variant_Impl__obj::toBool(this->behaviours->get(HX_("indeterminate",fb,f6,49,0e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Progress_obj,get_indeterminate,return )

bool Progress_obj::set_indeterminate(bool value){
            	HX_GC_STACKFRAME(&_hx_pos_e44bd98550140bda_613_set_indeterminate)
HXLINE( 614)		if (::hx::IsNull( this->behaviours )) {
HXLINE( 615)			return value;
            		}
HXLINE( 617)		 ::haxe::ui::behaviours::Behaviours _hx_tmp = this->behaviours;
HXDLIN( 617)		_hx_tmp->set(HX_("indeterminate",fb,f6,49,0e),::haxe::ui::util::_Variant::Variant_Impl__obj::fromBool(value));
HXLINE( 618)		this->dispatch( ::haxe::ui::events::UIEvent_obj::__alloc( HX_CTX ,HX_("propertychange",85,47,b1,35),null(),HX_("indeterminate",fb,f6,49,0e)));
HXLINE( 619)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Progress_obj,set_indeterminate,return )

Float Progress_obj::get_pos(){
            	HX_STACKFRAME(&_hx_pos_e44bd98550140bda_566_get_pos)
HXLINE( 567)		if (::hx::IsNull( this->behaviours )) {
HXLINE( 568)			return ( (Float)(0) );
            		}
HXLINE( 570)		return ( (Float)(::haxe::ui::util::_Variant::Variant_Impl__obj::toFloat(this->behaviours->get(HX_("pos",94,5d,55,00)))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Progress_obj,get_pos,return )

Float Progress_obj::set_pos(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_e44bd98550140bda_583_set_pos)
HXLINE( 584)		 ::haxe::ui::behaviours::Behaviours _hx_tmp = this->behaviours;
HXDLIN( 584)		_hx_tmp->set(HX_("pos",94,5d,55,00),::haxe::ui::util::_Variant::Variant_Impl__obj::fromFloat(value));
HXLINE( 585)		this->dispatch( ::haxe::ui::events::UIEvent_obj::__alloc( HX_CTX ,HX_("propertychange",85,47,b1,35),null(),HX_("pos",94,5d,55,00)));
HXLINE( 586)		this->dispatch( ::haxe::ui::events::UIEvent_obj::__alloc( HX_CTX ,HX_("propertychange",85,47,b1,35),null(),HX_("value",71,7f,b8,31)));
HXLINE( 587)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Progress_obj,set_pos,return )

 ::Dynamic Progress_obj::get_value(){
            	HX_STACKFRAME(&_hx_pos_e44bd98550140bda_689_get_value)
HXDLIN( 689)		return this->get_pos();
            	}


 ::Dynamic Progress_obj::set_value( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e44bd98550140bda_707_set_value)
HXLINE( 708)		{
HXLINE( 708)			 ::ValueType _g = ::Type_obj::_hx_typeof(value);
HXDLIN( 708)			switch((int)(_g->_hx_getIndex())){
            				case (int)3: {
HXLINE( 715)					Float _hx_tmp;
HXDLIN( 715)					if (::hx::IsEq( value,true )) {
HXLINE( 715)						_hx_tmp = ( (Float)(1) );
            					}
            					else {
HXLINE( 715)						_hx_tmp = ( (Float)(0) );
            					}
HXDLIN( 715)					this->set_pos(_hx_tmp);
            				}
            				break;
            				case (int)6: {
HXLINE( 712)					if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ClassOf< ::String >() )) {
HXLINE( 713)						this->set_pos(::Std_obj::parseFloat(( (::String)(value) )));
            					}
            					else {
HXLINE( 717)						this->set_pos(( (Float)(value) ));
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 709)					if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ClassOf< ::haxe::ui::util::VariantType >() )) {
HXLINE( 710)						 ::haxe::ui::util::VariantType v = value;
HXLINE( 711)						this->set_pos(( (Float)(::haxe::ui::util::_Variant::Variant_Impl__obj::toFloat(v)) ));
            					}
            					else {
HXLINE( 717)						this->set_pos(( (Float)(value) ));
            					}
            				}
            				break;
            				default:{
HXLINE( 717)					this->set_pos(( (Float)(value) ));
            				}
            			}
            		}
HXLINE( 720)		return value;
            	}


 ::haxe::ui::core::ComponentContainer Progress_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_a1772851c9fd4503_651_cloneComponent)
HXLINE( 441)		 ::haxe::ui::components::Progress c = ( ( ::haxe::ui::components::Progress)(this->super::cloneComponent()) );
HXLINE( 452)		c->set_indeterminate(this->get_indeterminate());
HXDLIN( 452)		c->set_pos(this->get_pos());
HXLINE( 456)		{
HXLINE( 457)			::Array< ::Dynamic> _hx_tmp;
HXDLIN( 457)			if (::hx::IsNull( this->_children )) {
HXLINE( 457)				_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 457)				_hx_tmp = this->_children;
            			}
HXDLIN( 457)			::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 457)			if (::hx::IsNull( c->_children )) {
HXLINE( 457)				_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 457)				_hx_tmp1 = c->_children;
            			}
HXDLIN( 457)			if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 458)				int _g = 0;
HXDLIN( 458)				::Array< ::Dynamic> _g1;
HXDLIN( 458)				if (::hx::IsNull( this->_children )) {
HXLINE( 458)					_g1 = ::Array_obj< ::Dynamic>::__new(0);
            				}
            				else {
HXLINE( 458)					_g1 = this->_children;
            				}
HXDLIN( 458)				while((_g < _g1->length)){
HXLINE( 458)					 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 458)					_g = (_g + 1);
HXLINE( 459)					c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            				}
            			}
HXLINE( 463)			this->postCloneComponent(( ( ::haxe::ui::core::Component)(c) ));
            		}
HXLINE( 465)		return c;
            	}


 ::haxe::ui::core::ComponentContainer Progress_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_e44bd98550140bda_493_self)
HXDLIN( 493)		return  ::haxe::ui::components::Progress_obj::__alloc( HX_CTX );
            	}



::hx::ObjectPtr< Progress_obj > Progress_obj::__new() {
	::hx::ObjectPtr< Progress_obj > __this = new Progress_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Progress_obj > Progress_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Progress_obj *__this = (Progress_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Progress_obj), true, "haxe.ui.components.Progress"));
	*(void **)__this = Progress_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Progress_obj::Progress_obj()
{
}

::hx::Val Progress_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_pos() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"self") ) { return ::hx::Val( self_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_pos") ) { return ::hx::Val( get_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pos") ) { return ::hx::Val( set_pos_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_value") ) { return ::hx::Val( get_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return ::hx::Val( set_value_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_cssName") ) { return ::hx::Val( get_cssName_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"indeterminate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_indeterminate() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return ::hx::Val( cloneComponent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerComposite") ) { return ::hx::Val( registerComposite_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_indeterminate") ) { return ::hx::Val( get_indeterminate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_indeterminate") ) { return ::hx::Val( set_indeterminate_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return ::hx::Val( registerBehaviours_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Progress_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pos(inValue.Cast< Float >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"indeterminate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_indeterminate(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Progress_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("indeterminate",fb,f6,49,0e));
	outFields->push(HX_("pos",94,5d,55,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Progress_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Progress_obj_sStaticStorageInfo = 0;
#endif

static ::String Progress_obj_sMemberFields[] = {
	HX_("get_cssName",c5,1f,bf,00),
	HX_("registerComposite",24,e5,7f,fe),
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("get_indeterminate",52,02,ba,14),
	HX_("set_indeterminate",5e,da,27,38),
	HX_("get_pos",2b,26,ca,26),
	HX_("set_pos",37,b7,cb,19),
	HX_("get_value",c8,db,61,75),
	HX_("set_value",d4,c7,b2,58),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	::String(null()) };

::hx::Class Progress_obj::__mClass;

void Progress_obj::__register()
{
	Progress_obj _hx_dummy;
	Progress_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.components.Progress",53,ca,58,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Progress_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Progress_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Progress_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Progress_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace components
