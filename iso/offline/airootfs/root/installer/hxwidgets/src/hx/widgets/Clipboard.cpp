// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_d3ff2c044ad995f9
#define INCLUDED_d3ff2c044ad995f9
#include "wx/clipbrd.h"
#endif
#ifndef INCLUDED_ba0dc751eb097782
#define INCLUDED_ba0dc751eb097782
#include "wx/dataobj.h"
#endif
#ifndef INCLUDED_eb4c1394ce7c5dd4
#define INCLUDED_eb4c1394ce7c5dd4
#include "wx/object.h"
#endif
#ifndef INCLUDED_hx_widgets_Clipboard
#include <hx/widgets/Clipboard.h>
#endif
#ifndef INCLUDED_hx_widgets_DataObject
#include <hx/widgets/DataObject.h>
#endif
#ifndef INCLUDED_hx_widgets_DataObjectSimple
#include <hx/widgets/DataObjectSimple.h>
#endif
#ifndef INCLUDED_hx_widgets_Object
#include <hx/widgets/Object.h>
#endif
#ifndef INCLUDED_hx_widgets_TextDataObject
#include <hx/widgets/TextDataObject.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_9_new,"hx.widgets.Clipboard","new",0x306be94b,"hx.widgets.Clipboard.new","hx/widgets/Clipboard.hx",9,0x730bec87)
HX_LOCAL_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_13_open,"hx.widgets.Clipboard","open",0x2eb1b87f,"hx.widgets.Clipboard.open","hx/widgets/Clipboard.hx",13,0x730bec87)
HX_LOCAL_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_17_close,"hx.widgets.Clipboard","close",0xc1638163,"hx.widgets.Clipboard.close","hx/widgets/Clipboard.hx",17,0x730bec87)
HX_LOCAL_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_21_getData,"hx.widgets.Clipboard","getData",0x1e14704b,"hx.widgets.Clipboard.getData","hx/widgets/Clipboard.hx",21,0x730bec87)
HX_LOCAL_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_25_setData,"hx.widgets.Clipboard","setData",0x11160157,"hx.widgets.Clipboard.setData","hx/widgets/Clipboard.hx",25,0x730bec87)
HX_LOCAL_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_67_get_clipboardRef,"hx.widgets.Clipboard","get_clipboardRef",0x293b51db,"hx.widgets.Clipboard.get_clipboardRef","hx/widgets/Clipboard.hx",67,0x730bec87)
HX_LOCAL_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_31_get,"hx.widgets.Clipboard","get",0x30669981,"hx.widgets.Clipboard.get","hx/widgets/Clipboard.hx",31,0x730bec87)
HX_LOCAL_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_42_get_textData,"hx.widgets.Clipboard","get_textData",0x86f94f35,"hx.widgets.Clipboard.get_textData","hx/widgets/Clipboard.hx",42,0x730bec87)
HX_LOCAL_STACK_FRAME(_hx_pos_57ab716c6ee20d4d_55_set_textData,"hx.widgets.Clipboard","set_textData",0x9bf272a9,"hx.widgets.Clipboard.set_textData","hx/widgets/Clipboard.hx",55,0x730bec87)
namespace hx{
namespace widgets{

void Clipboard_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_9_new)
HXDLIN(   9)		super::__construct();
            	}

Dynamic Clipboard_obj::__CreateEmpty() { return new Clipboard_obj; }

void *Clipboard_obj::_hx_vtable = 0;

Dynamic Clipboard_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Clipboard_obj > _hx_result = new Clipboard_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Clipboard_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0d3fa7b7) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0d3fa7b7;
	} else {
		return inClassId==(int)0x2045b63e;
	}
}

bool Clipboard_obj::open(){
            	HX_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_13_open)
HXDLIN(  13)		return this->get_clipboardRef()->ptr->Open();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clipboard_obj,open,return )

void Clipboard_obj::close(){
            	HX_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_17_close)
HXDLIN(  17)		this->get_clipboardRef()->ptr->Close();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clipboard_obj,close,(void))

bool Clipboard_obj::getData( ::hx::widgets::DataObject data){
            	HX_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_21_getData)
HXDLIN(  21)		 wxClipboard * _hx_tmp = this->get_clipboardRef()->ptr;
HXDLIN(  21)		return (*(_hx_tmp)).GetData(data->_ref->get_ref());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clipboard_obj,getData,return )

bool Clipboard_obj::setData( ::hx::widgets::DataObject data){
            	HX_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_25_setData)
HXDLIN(  25)		 wxClipboard * _hx_tmp = this->get_clipboardRef()->ptr;
HXDLIN(  25)		return (*(_hx_tmp)).SetData(data->_ref->get_raw());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Clipboard_obj,setData,return )

::cpp::Pointer<  wxClipboard > Clipboard_obj::get_clipboardRef(){
            	HX_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_67_get_clipboardRef)
HXDLIN(  67)		return this->_ref->reinterpret();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Clipboard_obj,get_clipboardRef,return )

 ::hx::widgets::Clipboard Clipboard_obj::get(){
            	HX_GC_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_31_get)
HXLINE(  32)		 ::hx::widgets::Clipboard c =  ::hx::widgets::Clipboard_obj::__alloc( HX_CTX );
HXLINE(  33)		 wxClipboard* p = wxTheClipboard;
HXLINE(  34)		c->_ref = ::cpp::Pointer_obj::fromRaw(p)->reinterpret();
HXLINE(  35)		return c;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Clipboard_obj,get,return )

::String Clipboard_obj::get_textData(){
            	HX_GC_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_42_get_textData)
HXLINE(  43)		::String data = null();
HXLINE(  45)		 ::hx::widgets::Clipboard clipboard = ::hx::widgets::Clipboard_obj::get();
HXLINE(  46)		clipboard->open();
HXLINE(  47)		 ::hx::widgets::TextDataObject td =  ::hx::widgets::TextDataObject_obj::__alloc( HX_CTX ,null());
HXLINE(  48)		clipboard->getData(td);
HXLINE(  49)		clipboard->close();
HXLINE(  50)		data = td->get_text();
HXLINE(  51)		td->destroy();
HXLINE(  53)		return data;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Clipboard_obj,get_textData,return )

::String Clipboard_obj::set_textData(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_57ab716c6ee20d4d_55_set_textData)
HXLINE(  56)		 ::hx::widgets::Clipboard clipboard = ::hx::widgets::Clipboard_obj::get();
HXLINE(  57)		clipboard->open();
HXLINE(  58)		 ::hx::widgets::TextDataObject td =  ::hx::widgets::TextDataObject_obj::__alloc( HX_CTX ,value);
HXLINE(  59)		clipboard->setData(td);
HXLINE(  60)		clipboard->close();
HXLINE(  62)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Clipboard_obj,set_textData,return )


::hx::ObjectPtr< Clipboard_obj > Clipboard_obj::__new() {
	::hx::ObjectPtr< Clipboard_obj > __this = new Clipboard_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Clipboard_obj > Clipboard_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Clipboard_obj *__this = (Clipboard_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Clipboard_obj), true, "hx.widgets.Clipboard"));
	*(void **)__this = Clipboard_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Clipboard_obj::Clipboard_obj()
{
}

void Clipboard_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Clipboard);
	HX_MARK_MEMBER_NAME(clipboardRef,"clipboardRef");
	 ::hx::widgets::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Clipboard_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(clipboardRef,"clipboardRef");
	 ::hx::widgets::Object_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Clipboard_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"open") ) { return ::hx::Val( open_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getData") ) { return ::hx::Val( getData_dyn() ); }
		if (HX_FIELD_EQ(inName,"setData") ) { return ::hx::Val( setData_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"clipboardRef") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_clipboardRef() : clipboardRef ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_clipboardRef") ) { return ::hx::Val( get_clipboardRef_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Clipboard_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"textData") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_textData() ); return true; } }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_textData") ) { outValue = get_textData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_textData") ) { outValue = set_textData_dyn(); return true; }
	}
	return false;
}

::hx::Val Clipboard_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"clipboardRef") ) { clipboardRef=inValue.Cast< ::cpp::Pointer<  wxClipboard > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Clipboard_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"textData") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_textData(ioValue.Cast< ::String >()) ); }
	}
	return false;
}

void Clipboard_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("clipboardRef",1d,f5,c7,8e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Clipboard_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /* ::cpp::Pointer<  wxClipboard > */ ,(int)offsetof(Clipboard_obj,clipboardRef),HX_("clipboardRef",1d,f5,c7,8e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Clipboard_obj_sStaticStorageInfo = 0;
#endif

static ::String Clipboard_obj_sMemberFields[] = {
	HX_("open",ca,03,b4,49),
	HX_("close",b8,17,63,48),
	HX_("getData",e0,05,e6,14),
	HX_("setData",ec,96,e7,07),
	HX_("clipboardRef",1d,f5,c7,8e),
	HX_("get_clipboardRef",a6,e1,66,93),
	::String(null()) };

::hx::Class Clipboard_obj::__mClass;

static ::String Clipboard_obj_sStaticFields[] = {
	HX_("get",96,80,4e,00),
	HX_("get_textData",80,5d,78,fa),
	HX_("set_textData",f4,80,71,0f),
	::String(null())
};

void Clipboard_obj::__register()
{
	Clipboard_obj _hx_dummy;
	Clipboard_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.widgets.Clipboard",d9,e7,bc,01);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Clipboard_obj::__GetStatic;
	__mClass->mSetStaticField = &Clipboard_obj::__SetStatic;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Clipboard_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Clipboard_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Clipboard_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Clipboard_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Clipboard_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace widgets
