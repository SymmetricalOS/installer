// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_d17caf3128e9a450
#define INCLUDED_d17caf3128e9a450
#include "wx/arrstr.h"
#endif
#ifndef INCLUDED_83f71eba104de7a2
#define INCLUDED_83f71eba104de7a2
#include "wx/gdicmn.h"
#endif
#ifndef INCLUDED_eb4c1394ce7c5dd4
#define INCLUDED_eb4c1394ce7c5dd4
#include "wx/object.h"
#endif
#ifndef INCLUDED_058190ed12c7e803
#define INCLUDED_058190ed12c7e803
#include "wx/string.h"
#endif
#ifndef INCLUDED_224ae41206d096c1
#define INCLUDED_224ae41206d096c1
#include "wx/textctrl.h"
#endif
#ifndef INCLUDED_aa68ac286eaa278a
#define INCLUDED_aa68ac286eaa278a
#include "wx/window.h"
#endif
#ifndef INCLUDED_hx_widgets_ArrayString
#include <hx/widgets/ArrayString.h>
#endif
#ifndef INCLUDED_hx_widgets_Control
#include <hx/widgets/Control.h>
#endif
#ifndef INCLUDED_hx_widgets_EvtHandler
#include <hx/widgets/EvtHandler.h>
#endif
#ifndef INCLUDED_hx_widgets_Object
#include <hx/widgets/Object.h>
#endif
#ifndef INCLUDED_hx_widgets_Point
#include <hx/widgets/Point.h>
#endif
#ifndef INCLUDED_hx_widgets_Size
#include <hx/widgets/Size.h>
#endif
#ifndef INCLUDED_hx_widgets_TextCtrl
#include <hx/widgets/TextCtrl.h>
#endif
#ifndef INCLUDED_hx_widgets_TextEntry
#include <hx/widgets/TextEntry.h>
#endif
#ifndef INCLUDED_hx_widgets_Trackable
#include <hx/widgets/Trackable.h>
#endif
#ifndef INCLUDED_hx_widgets_Window
#include <hx/widgets/Window.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_73cec53f5b87b09c_12_new,"hx.widgets.TextCtrl","new",0x7a5c3ac7,"hx.widgets.TextCtrl.new","hx/widgets/TextCtrl.hx",12,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_25_appendText,"hx.widgets.TextCtrl","appendText",0x988a9020,"hx.widgets.TextCtrl.appendText","hx/widgets/TextCtrl.hx",25,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_30_autoComplete,"hx.widgets.TextCtrl","autoComplete",0xf9a4b401,"hx.widgets.TextCtrl.autoComplete","hx/widgets/TextCtrl.hx",30,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_37_canCopy,"hx.widgets.TextCtrl","canCopy",0x45e7cdcc,"hx.widgets.TextCtrl.canCopy","hx/widgets/TextCtrl.hx",37,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_41_canCut,"hx.widgets.TextCtrl","canCut",0x87c6834b,"hx.widgets.TextCtrl.canCut","hx/widgets/TextCtrl.hx",41,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_45_canPaste,"hx.widgets.TextCtrl","canPaste",0x57e3155c,"hx.widgets.TextCtrl.canPaste","hx/widgets/TextCtrl.hx",45,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_49_canRedo,"hx.widgets.TextCtrl","canRedo",0x4fca6015,"hx.widgets.TextCtrl.canRedo","hx/widgets/TextCtrl.hx",49,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_53_canUndo,"hx.widgets.TextCtrl","canUndo",0x51ccd83b,"hx.widgets.TextCtrl.canUndo","hx/widgets/TextCtrl.hx",53,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_56_changeValue,"hx.widgets.TextCtrl","changeValue",0xee21d148,"hx.widgets.TextCtrl.changeValue","hx/widgets/TextCtrl.hx",56,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_63_clear,"hx.widgets.TextCtrl","clear",0xa52083b4,"hx.widgets.TextCtrl.clear","hx/widgets/TextCtrl.hx",63,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_67_copy,"hx.widgets.TextCtrl","copy",0x8f196b6e,"hx.widgets.TextCtrl.copy","hx/widgets/TextCtrl.hx",67,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_71_cut,"hx.widgets.TextCtrl","cut",0x7a53efe9,"hx.widgets.TextCtrl.cut","hx/widgets/TextCtrl.hx",71,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_76_forceUpper,"hx.widgets.TextCtrl","forceUpper",0x7c98c3f0,"hx.widgets.TextCtrl.forceUpper","hx/widgets/TextCtrl.hx",76,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_82_get_insertionPoint,"hx.widgets.TextCtrl","get_insertionPoint",0xfb9007e3,"hx.widgets.TextCtrl.get_insertionPoint","hx/widgets/TextCtrl.hx",82,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_84_set_insertionPoint,"hx.widgets.TextCtrl","set_insertionPoint",0xd83f3a57,"hx.widgets.TextCtrl.set_insertionPoint","hx/widgets/TextCtrl.hx",84,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_92_get_margins,"hx.widgets.TextCtrl","get_margins",0x81f2c203,"hx.widgets.TextCtrl.get_margins","hx/widgets/TextCtrl.hx",92,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_94_set_margins,"hx.widgets.TextCtrl","set_margins",0x8c5fc90f,"hx.widgets.TextCtrl.set_margins","hx/widgets/TextCtrl.hx",94,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_101_getRange,"hx.widgets.TextCtrl","getRange",0x6ff03580,"hx.widgets.TextCtrl.getRange","hx/widgets/TextCtrl.hx",101,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_107_get_value,"hx.widgets.TextCtrl","get_value",0xc3b88d6f,"hx.widgets.TextCtrl.get_value","hx/widgets/TextCtrl.hx",107,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_111_set_value,"hx.widgets.TextCtrl","set_value",0xa709797b,"hx.widgets.TextCtrl.set_value","hx/widgets/TextCtrl.hx",111,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_118_get_selection,"hx.widgets.TextCtrl","get_selection",0x956cdd4a,"hx.widgets.TextCtrl.get_selection","hx/widgets/TextCtrl.hx",118,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_127_set_selection,"hx.widgets.TextCtrl","set_selection",0xda72bf56,"hx.widgets.TextCtrl.set_selection","hx/widgets/TextCtrl.hx",127,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_133_get_stringSelection,"hx.widgets.TextCtrl","get_stringSelection",0x526544b9,"hx.widgets.TextCtrl.get_stringSelection","hx/widgets/TextCtrl.hx",133,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_141_get_editable,"hx.widgets.TextCtrl","get_editable",0xc3504966,"hx.widgets.TextCtrl.get_editable","hx/widgets/TextCtrl.hx",141,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_143_set_editable,"hx.widgets.TextCtrl","set_editable",0xd8496cda,"hx.widgets.TextCtrl.set_editable","hx/widgets/TextCtrl.hx",143,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_149_isEmpty,"hx.widgets.TextCtrl","isEmpty",0xf22b082a,"hx.widgets.TextCtrl.isEmpty","hx/widgets/TextCtrl.hx",149,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_153_paste,"hx.widgets.TextCtrl","paste",0x1a1b657a,"hx.widgets.TextCtrl.paste","hx/widgets/TextCtrl.hx",153,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_157_redo,"hx.widgets.TextCtrl","redo",0x98fbfdb7,"hx.widgets.TextCtrl.redo","hx/widgets/TextCtrl.hx",157,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_161_remove,"hx.widgets.TextCtrl","remove",0xd4336c3d,"hx.widgets.TextCtrl.remove","hx/widgets/TextCtrl.hx",161,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_164_replace,"hx.widgets.TextCtrl","replace",0x90f3721b,"hx.widgets.TextCtrl.replace","hx/widgets/TextCtrl.hx",164,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_170_selectAll,"hx.widgets.TextCtrl","selectAll",0xdc534d2c,"hx.widgets.TextCtrl.selectAll","hx/widgets/TextCtrl.hx",170,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_174_selectNone,"hx.widgets.TextCtrl","selectNone",0xf52a484d,"hx.widgets.TextCtrl.selectNone","hx/widgets/TextCtrl.hx",174,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_178_get_hint,"hx.widgets.TextCtrl","get_hint",0xf0c27949,"hx.widgets.TextCtrl.get_hint","hx/widgets/TextCtrl.hx",178,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_182_set_hint,"hx.widgets.TextCtrl","set_hint",0x9f1fd2bd,"hx.widgets.TextCtrl.set_hint","hx/widgets/TextCtrl.hx",182,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_189_set_maxLength,"hx.widgets.TextCtrl","set_maxLength",0x1aea6db4,"hx.widgets.TextCtrl.set_maxLength","hx/widgets/TextCtrl.hx",189,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_196_undo,"hx.widgets.TextCtrl","undo",0x9afe75dd,"hx.widgets.TextCtrl.undo","hx/widgets/TextCtrl.hx",196,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_199_writeText,"hx.widgets.TextCtrl","writeText",0xa40472d3,"hx.widgets.TextCtrl.writeText","hx/widgets/TextCtrl.hx",199,0x8ad78cc7)
HX_LOCAL_STACK_FRAME(_hx_pos_73cec53f5b87b09c_209_get_textCtrlRef,"hx.widgets.TextCtrl","get_textCtrlRef",0x285620b9,"hx.widgets.TextCtrl.get_textCtrlRef","hx/widgets/TextCtrl.hx",209,0x8ad78cc7)
namespace hx{
namespace widgets{

void TextCtrl_obj::__construct( ::hx::widgets::Window parent,::String text,::hx::Null< int >  __o_style,::hx::Null< int >  __o_id){
            		int style = __o_style.Default(0);
            		int id = __o_id.Default(-1);
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_12_new)
HXLINE(  13)		if (::hx::IsNull( this->_ref )) {
HXLINE(  14)			this->_ref = ::cpp::Pointer_obj::fromRaw((new wxTextCtrl()))->reinterpret();
HXLINE(  15)			 wxString str = wxString::FromUTF8(text.utf8_str());
HXLINE(  16)			 wxTextCtrl * _hx_tmp = this->get_textCtrlRef()->ptr;
HXDLIN(  16)			 wxWindow* _hx_tmp1 = ::hx::widgets::Window_obj::toRaw(parent);
HXDLIN(  16)			 wxPoint & _hx_tmp2 = ::hx::widgets::Point_obj::get_defaultPosition()->get_ref();
HXDLIN(  16)			 wxSize & _hx_tmp3 = ::hx::widgets::Size_obj::get_defaultSize()->get_ref();
HXDLIN(  16)			(*(_hx_tmp)).Create(_hx_tmp1,id,str,_hx_tmp2,_hx_tmp3,style);
            		}
HXLINE(  19)		super::__construct(parent,id,null());
            	}

Dynamic TextCtrl_obj::__CreateEmpty() { return new TextCtrl_obj; }

void *TextCtrl_obj::_hx_vtable = 0;

Dynamic TextCtrl_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextCtrl_obj > _hx_result = new TextCtrl_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TextCtrl_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2045b63e) {
		if (inClassId<=(int)0x0f2dbd53) {
			if (inClassId<=(int)0x0345708e) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0345708e;
			} else {
				return inClassId==(int)0x0f2dbd53;
			}
		} else {
			return inClassId==(int)0x2045b63e;
		}
	} else {
		return inClassId==(int)0x467ba226 || inClassId==(int)0x5d92cb6f;
	}
}

static ::hx::widgets::TextEntry_obj _hx_hx_widgets_TextCtrl__hx_hx_widgets_TextEntry= {
};

void *TextCtrl_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc39007a6: return &_hx_hx_widgets_TextCtrl__hx_hx_widgets_TextEntry;
	}
	return super::_hx_getInterface(inHash);
}

void TextCtrl_obj::appendText(::String value){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_25_appendText)
HXLINE(  26)		 wxString s = wxString::FromUTF8(value.utf8_str());
HXLINE(  27)		this->get_textCtrlRef()->ptr->AppendText(s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,appendText,(void))

void TextCtrl_obj::autoComplete(::Array< ::String > choices){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_30_autoComplete)
HXLINE(  31)		 ::hx::widgets::ArrayString choicesArr = ::hx::widgets::ArrayString_obj::fromArray(choices);
HXLINE(  32)		 wxTextCtrl * _hx_tmp = this->get_textCtrlRef()->ptr;
HXDLIN(  32)		(*(_hx_tmp)).AutoComplete(choicesArr->get_arraystringRef()->get_ref());
HXLINE(  33)		choicesArr->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,autoComplete,(void))

bool TextCtrl_obj::canCopy(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_37_canCopy)
HXDLIN(  37)		return this->get_textCtrlRef()->ptr->CanCopy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,canCopy,return )

bool TextCtrl_obj::canCut(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_41_canCut)
HXDLIN(  41)		return this->get_textCtrlRef()->ptr->CanCut();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,canCut,return )

bool TextCtrl_obj::canPaste(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_45_canPaste)
HXDLIN(  45)		return this->get_textCtrlRef()->ptr->CanPaste();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,canPaste,return )

bool TextCtrl_obj::canRedo(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_49_canRedo)
HXDLIN(  49)		return this->get_textCtrlRef()->ptr->CanRedo();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,canRedo,return )

bool TextCtrl_obj::canUndo(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_53_canUndo)
HXDLIN(  53)		return this->get_textCtrlRef()->ptr->CanUndo();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,canUndo,return )

::String TextCtrl_obj::changeValue(::String value){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_56_changeValue)
HXLINE(  57)		 wxString s = wxString::FromUTF8(value.utf8_str());
HXLINE(  58)		this->get_textCtrlRef()->ptr->ChangeValue(s);
HXLINE(  59)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,changeValue,return )

void TextCtrl_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_63_clear)
HXDLIN(  63)		this->get_textCtrlRef()->ptr->Clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,clear,(void))

void TextCtrl_obj::copy(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_67_copy)
HXDLIN(  67)		this->get_textCtrlRef()->ptr->Copy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,copy,(void))

void TextCtrl_obj::cut(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_71_cut)
HXDLIN(  71)		this->get_textCtrlRef()->ptr->Cut();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,cut,(void))

void TextCtrl_obj::forceUpper(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_76_forceUpper)
HXDLIN(  76)		this->get_textCtrlRef()->ptr->ForceUpper();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,forceUpper,(void))

int TextCtrl_obj::get_insertionPoint(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_82_get_insertionPoint)
HXDLIN(  82)		return this->get_textCtrlRef()->ptr->GetInsertionPoint();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,get_insertionPoint,return )

int TextCtrl_obj::set_insertionPoint(int value){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_84_set_insertionPoint)
HXLINE(  85)		this->get_textCtrlRef()->ptr->SetInsertionPoint(value);
HXLINE(  86)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,set_insertionPoint,return )

 ::hx::widgets::Point TextCtrl_obj::get_margins(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_92_get_margins)
HXDLIN(  92)		return ::hx::widgets::Point_obj::copy(this->get_textCtrlRef()->ptr->GetMargins());
            	}


 ::hx::widgets::Point TextCtrl_obj::set_margins( ::hx::widgets::Point pt){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_94_set_margins)
HXLINE(  95)		::cpp::Pointer<  wxPoint > temp = pt->createPointer();
HXLINE(  96)		 wxTextCtrl * _hx_tmp = this->get_textCtrlRef()->ptr;
HXDLIN(  96)		(*(_hx_tmp)).SetMargins(temp->get_ref());
HXLINE(  97)		temp->destroy();
HXLINE(  98)		return this->get_margins();
            	}


::String TextCtrl_obj::getRange(int from,int to){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_101_getRange)
HXLINE( 102)		 wxString r = this->get_textCtrlRef()->ptr->GetRange(from,to);
HXLINE( 103)		return ::String(::String(r.ToUTF8().data()));
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextCtrl_obj,getRange,return )

::String TextCtrl_obj::get_value(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_107_get_value)
HXLINE( 108)		 wxString r = this->get_textCtrlRef()->ptr->GetValue();
HXLINE( 109)		return ::String(::String(r.ToUTF8().data()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,get_value,return )

::String TextCtrl_obj::set_value(::String value){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_111_set_value)
HXLINE( 112)		 wxString s = wxString::FromUTF8(value.utf8_str());
HXLINE( 113)		this->get_textCtrlRef()->ptr->SetValue(s);
HXLINE( 114)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,set_value,return )

 ::Dynamic TextCtrl_obj::get_selection(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_118_get_selection)
HXLINE( 119)		 long start = ( ( long)(0) );
HXLINE( 120)		 long end = ( ( long)(0) );
HXLINE( 121)		 long* startPtr = ::cpp::Pointer_obj::addressOf(start)->get_raw();
HXLINE( 122)		 long* endPtr = ::cpp::Pointer_obj::addressOf(end)->get_raw();
HXLINE( 124)		this->get_textCtrlRef()->ptr->GetSelection(startPtr,endPtr);
HXLINE( 125)		int _hx_tmp = ((int)start);
HXDLIN( 125)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("start",62,74,0b,84),_hx_tmp)
            			->setFixed(1,HX_("end",db,03,4d,00),((int)end)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,get_selection,return )

 ::Dynamic TextCtrl_obj::set_selection( ::Dynamic sel){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_127_set_selection)
HXLINE( 128)		this->get_textCtrlRef()->ptr->SetSelection(( (int)(sel->__Field(HX_("start",62,74,0b,84),::hx::paccDynamic)) ),( (int)(sel->__Field(HX_("end",db,03,4d,00),::hx::paccDynamic)) ));
HXLINE( 129)		return sel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,set_selection,return )

::String TextCtrl_obj::get_stringSelection(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_133_get_stringSelection)
HXLINE( 134)		 wxString r = this->get_textCtrlRef()->ptr->GetStringSelection();
HXLINE( 135)		return ::String(::String(r.ToUTF8().data()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,get_stringSelection,return )

bool TextCtrl_obj::get_editable(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_141_get_editable)
HXDLIN( 141)		return this->get_textCtrlRef()->ptr->IsEditable();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,get_editable,return )

bool TextCtrl_obj::set_editable(bool b){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_143_set_editable)
HXLINE( 144)		this->get_textCtrlRef()->ptr->SetEditable(b);
HXLINE( 145)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,set_editable,return )

bool TextCtrl_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_149_isEmpty)
HXDLIN( 149)		return this->get_textCtrlRef()->ptr->IsEmpty();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,isEmpty,return )

void TextCtrl_obj::paste(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_153_paste)
HXDLIN( 153)		this->get_textCtrlRef()->ptr->Paste();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,paste,(void))

void TextCtrl_obj::redo(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_157_redo)
HXDLIN( 157)		this->get_textCtrlRef()->ptr->Redo();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,redo,(void))

void TextCtrl_obj::remove(int from,int to){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_161_remove)
HXDLIN( 161)		this->get_textCtrlRef()->ptr->Remove(from,to);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextCtrl_obj,remove,(void))

void TextCtrl_obj::replace(int from,int to,::String value){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_164_replace)
HXLINE( 165)		 wxString s = wxString::FromUTF8(value.utf8_str());
HXLINE( 166)		this->get_textCtrlRef()->ptr->Replace(from,to,s);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextCtrl_obj,replace,(void))

void TextCtrl_obj::selectAll(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_170_selectAll)
HXDLIN( 170)		this->get_textCtrlRef()->ptr->SelectAll();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,selectAll,(void))

void TextCtrl_obj::selectNone(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_174_selectNone)
HXDLIN( 174)		this->get_textCtrlRef()->ptr->SelectNone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,selectNone,(void))

::String TextCtrl_obj::get_hint(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_178_get_hint)
HXLINE( 179)		 wxString r = this->get_textCtrlRef()->ptr->GetHint();
HXLINE( 180)		return ::String(::String(r.ToUTF8().data()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,get_hint,return )

::String TextCtrl_obj::set_hint(::String value){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_182_set_hint)
HXLINE( 183)		 wxString s = wxString::FromUTF8(value.utf8_str());
HXLINE( 184)		this->get_textCtrlRef()->ptr->SetHint(s);
HXLINE( 185)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,set_hint,return )

int TextCtrl_obj::set_maxLength(int len){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_189_set_maxLength)
HXLINE( 190)		this->get_textCtrlRef()->ptr->SetMaxLength(len);
HXLINE( 191)		this->maxLength = len;
HXLINE( 192)		return len;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,set_maxLength,return )

void TextCtrl_obj::undo(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_196_undo)
HXDLIN( 196)		this->get_textCtrlRef()->ptr->Undo();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,undo,(void))

void TextCtrl_obj::writeText(::String value){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_199_writeText)
HXLINE( 200)		 wxString s = wxString::FromUTF8(value.utf8_str());
HXLINE( 201)		this->get_textCtrlRef()->ptr->WriteText(s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextCtrl_obj,writeText,(void))

::cpp::Pointer<  wxTextCtrl > TextCtrl_obj::get_textCtrlRef(){
            	HX_STACKFRAME(&_hx_pos_73cec53f5b87b09c_209_get_textCtrlRef)
HXDLIN( 209)		return this->_ref->reinterpret();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextCtrl_obj,get_textCtrlRef,return )


::hx::ObjectPtr< TextCtrl_obj > TextCtrl_obj::__new( ::hx::widgets::Window parent,::String text,::hx::Null< int >  __o_style,::hx::Null< int >  __o_id) {
	::hx::ObjectPtr< TextCtrl_obj > __this = new TextCtrl_obj();
	__this->__construct(parent,text,__o_style,__o_id);
	return __this;
}

::hx::ObjectPtr< TextCtrl_obj > TextCtrl_obj::__alloc(::hx::Ctx *_hx_ctx, ::hx::widgets::Window parent,::String text,::hx::Null< int >  __o_style,::hx::Null< int >  __o_id) {
	TextCtrl_obj *__this = (TextCtrl_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextCtrl_obj), true, "hx.widgets.TextCtrl"));
	*(void **)__this = TextCtrl_obj::_hx_vtable;
	__this->__construct(parent,text,__o_style,__o_id);
	return __this;
}

TextCtrl_obj::TextCtrl_obj()
{
}

void TextCtrl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextCtrl);
	HX_MARK_MEMBER_NAME(stringSelection,"stringSelection");
	HX_MARK_MEMBER_NAME(maxLength,"maxLength");
	HX_MARK_MEMBER_NAME(textCtrlRef,"textCtrlRef");
	 ::hx::widgets::Control_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextCtrl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(stringSelection,"stringSelection");
	HX_VISIT_MEMBER_NAME(maxLength,"maxLength");
	HX_VISIT_MEMBER_NAME(textCtrlRef,"textCtrlRef");
	 ::hx::widgets::Control_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TextCtrl_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"cut") ) { return ::hx::Val( cut_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return ::hx::Val( copy_dyn() ); }
		if (HX_FIELD_EQ(inName,"redo") ) { return ::hx::Val( redo_dyn() ); }
		if (HX_FIELD_EQ(inName,"hint") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_hint() ); }
		if (HX_FIELD_EQ(inName,"undo") ) { return ::hx::Val( undo_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return ::hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_value() ); }
		if (HX_FIELD_EQ(inName,"paste") ) { return ::hx::Val( paste_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"canCut") ) { return ::hx::Val( canCut_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canCopy") ) { return ::hx::Val( canCopy_dyn() ); }
		if (HX_FIELD_EQ(inName,"canRedo") ) { return ::hx::Val( canRedo_dyn() ); }
		if (HX_FIELD_EQ(inName,"canUndo") ) { return ::hx::Val( canUndo_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return ::hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"replace") ) { return ::hx::Val( replace_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canPaste") ) { return ::hx::Val( canPaste_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRange") ) { return ::hx::Val( getRange_dyn() ); }
		if (HX_FIELD_EQ(inName,"editable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_editable() ); }
		if (HX_FIELD_EQ(inName,"get_hint") ) { return ::hx::Val( get_hint_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_hint") ) { return ::hx::Val( set_hint_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_value") ) { return ::hx::Val( get_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return ::hx::Val( set_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"selection") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_selection() ); }
		if (HX_FIELD_EQ(inName,"selectAll") ) { return ::hx::Val( selectAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"maxLength") ) { return ::hx::Val( maxLength ); }
		if (HX_FIELD_EQ(inName,"writeText") ) { return ::hx::Val( writeText_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"appendText") ) { return ::hx::Val( appendText_dyn() ); }
		if (HX_FIELD_EQ(inName,"forceUpper") ) { return ::hx::Val( forceUpper_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNone") ) { return ::hx::Val( selectNone_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"changeValue") ) { return ::hx::Val( changeValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"textCtrlRef") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_textCtrlRef() : textCtrlRef ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"autoComplete") ) { return ::hx::Val( autoComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_editable") ) { return ::hx::Val( get_editable_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_editable") ) { return ::hx::Val( set_editable_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_selection") ) { return ::hx::Val( get_selection_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selection") ) { return ::hx::Val( set_selection_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_maxLength") ) { return ::hx::Val( set_maxLength_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"insertionPoint") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_insertionPoint() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"stringSelection") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_stringSelection() : stringSelection ); }
		if (HX_FIELD_EQ(inName,"get_textCtrlRef") ) { return ::hx::Val( get_textCtrlRef_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_insertionPoint") ) { return ::hx::Val( get_insertionPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_insertionPoint") ) { return ::hx::Val( set_insertionPoint_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_stringSelection") ) { return ::hx::Val( get_stringSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TextCtrl_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"hint") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_hint(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_value(inValue.Cast< ::String >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"editable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_editable(inValue.Cast< bool >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"selection") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selection(inValue.Cast<  ::Dynamic >()) ); }
		if (HX_FIELD_EQ(inName,"maxLength") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_maxLength(inValue.Cast< int >()) );maxLength=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textCtrlRef") ) { textCtrlRef=inValue.Cast< ::cpp::Pointer<  wxTextCtrl > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"insertionPoint") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_insertionPoint(inValue.Cast< int >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"stringSelection") ) { stringSelection=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextCtrl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("insertionPoint",a1,c5,96,3b));
	outFields->push(HX_("margins",85,b8,54,65));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("selection",4c,f8,1a,8e));
	outFields->push(HX_("stringSelection",3b,8d,44,18));
	outFields->push(HX_("editable",a4,04,a6,d5));
	outFields->push(HX_("hint",87,3d,0e,45));
	outFields->push(HX_("maxLength",aa,a6,92,ce));
	outFields->push(HX_("textCtrlRef",3b,80,02,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextCtrl_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(TextCtrl_obj,stringSelection),HX_("stringSelection",3b,8d,44,18)},
	{::hx::fsInt,(int)offsetof(TextCtrl_obj,maxLength),HX_("maxLength",aa,a6,92,ce)},
	{::hx::fsUnknown /* ::cpp::Pointer<  wxTextCtrl > */ ,(int)offsetof(TextCtrl_obj,textCtrlRef),HX_("textCtrlRef",3b,80,02,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TextCtrl_obj_sStaticStorageInfo = 0;
#endif

static ::String TextCtrl_obj_sMemberFields[] = {
	HX_("appendText",a7,cf,05,5b),
	HX_("autoComplete",48,23,14,c1),
	HX_("canCopy",e5,a3,1c,60),
	HX_("canCut",52,b3,1b,b8),
	HX_("canPaste",23,95,e9,2b),
	HX_("canRedo",2e,36,ff,69),
	HX_("canUndo",54,ae,01,6c),
	HX_("changeValue",e1,27,7e,57),
	HX_("clear",8d,71,5b,48),
	HX_("copy",b5,bb,c4,41),
	HX_("cut",82,85,4b,00),
	HX_("forceUpper",77,03,14,3f),
	HX_("get_insertionPoint",6a,a6,30,d7),
	HX_("set_insertionPoint",de,d8,df,b3),
	HX_("getRange",47,b5,f6,43),
	HX_("get_value",c8,db,61,75),
	HX_("set_value",d4,c7,b2,58),
	HX_("get_selection",23,cc,7e,4f),
	HX_("set_selection",2f,ae,84,94),
	HX_("stringSelection",3b,8d,44,18),
	HX_("get_stringSelection",52,5c,4f,a3),
	HX_("get_editable",ad,b8,bf,8a),
	HX_("set_editable",21,dc,b8,9f),
	HX_("isEmpty",43,de,5f,0c),
	HX_("paste",53,53,56,bd),
	HX_("redo",fe,4d,a7,4b),
	HX_("remove",44,9c,88,04),
	HX_("replace",34,48,28,ab),
	HX_("selectAll",85,9b,fc,8d),
	HX_("selectNone",d4,87,a5,b7),
	HX_("get_hint",10,f9,c8,c4),
	HX_("set_hint",84,52,26,73),
	HX_("maxLength",aa,a6,92,ce),
	HX_("set_maxLength",8d,5c,fc,d4),
	HX_("undo",24,c6,a9,4d),
	HX_("writeText",2c,c1,ad,55),
	HX_("textCtrlRef",3b,80,02,3d),
	HX_("get_textCtrlRef",d2,37,e4,fd),
	::String(null()) };

::hx::Class TextCtrl_obj::__mClass;

void TextCtrl_obj::__register()
{
	TextCtrl_obj _hx_dummy;
	TextCtrl_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hx.widgets.TextCtrl",55,cb,4f,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextCtrl_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextCtrl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextCtrl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextCtrl_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace widgets
