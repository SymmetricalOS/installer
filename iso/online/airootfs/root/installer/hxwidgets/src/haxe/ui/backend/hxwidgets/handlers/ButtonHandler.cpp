// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_ba6509720fa912ce
#define INCLUDED_ba6509720fa912ce
#include "wx/defs.h"
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_hxwidgets_handlers_ButtonHandler
#include <haxe/ui/backend/hxwidgets/handlers/ButtonHandler.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_hxwidgets_handlers_NativeHandler
#include <haxe/ui/backend/hxwidgets/handlers/NativeHandler.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Button
#include <haxe/ui/components/Button.h>
#endif
#ifndef INCLUDED_haxe_ui_components_ButtonGroups
#include <haxe/ui/components/ButtonGroups.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IValueComponent
#include <haxe/ui/core/IValueComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_MouseEvent
#include <haxe/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_util_VariantType
#include <haxe/ui/util/VariantType.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_hx_widgets_AnyButton
#include <hx/widgets/AnyButton.h>
#endif
#ifndef INCLUDED_hx_widgets_Control
#include <hx/widgets/Control.h>
#endif
#ifndef INCLUDED_hx_widgets_Event
#include <hx/widgets/Event.h>
#endif
#ifndef INCLUDED_hx_widgets_EvtHandler
#include <hx/widgets/EvtHandler.h>
#endif
#ifndef INCLUDED_hx_widgets_Object
#include <hx/widgets/Object.h>
#endif
#ifndef INCLUDED_hx_widgets_ToggleButton
#include <hx/widgets/ToggleButton.h>
#endif
#ifndef INCLUDED_hx_widgets_Trackable
#include <hx/widgets/Trackable.h>
#endif
#ifndef INCLUDED_hx_widgets_Window
#include <hx/widgets/Window.h>
#endif
#ifndef INCLUDED_wx_widgets_EventType
#include <wx/widgets/EventType.h>
#endif
#ifndef INCLUDED_wx_widgets_styles_ButtonStyle
#include <wx/widgets/styles/ButtonStyle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_00c8fd9a668debf3_17_new,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler","new",0x41416820,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler.new","haxe/ui/backend/hxwidgets/handlers/ButtonHandler.hx",17,0xe2e7d32f)
HX_LOCAL_STACK_FRAME(_hx_pos_00c8fd9a668debf3_23_link,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler","link",0xd6aa483a,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler.link","haxe/ui/backend/hxwidgets/handlers/ButtonHandler.hx",23,0xe2e7d32f)
HX_LOCAL_STACK_FRAME(_hx_pos_00c8fd9a668debf3_27_unlink,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler","unlink",0x04dbdf13,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler.unlink","haxe/ui/backend/hxwidgets/handlers/ButtonHandler.hx",27,0xe2e7d32f)
HX_LOCAL_STACK_FRAME(_hx_pos_00c8fd9a668debf3_30___onToggleEvent,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler","__onToggleEvent",0xd2fa0da7,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler.__onToggleEvent","haxe/ui/backend/hxwidgets/handlers/ButtonHandler.hx",30,0xe2e7d32f)
HX_LOCAL_STACK_FRAME(_hx_pos_00c8fd9a668debf3_38_applyStyle,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler","applyStyle",0x3d480123,"haxe.ui.backend.hxwidgets.handlers.ButtonHandler.applyStyle","haxe/ui/backend/hxwidgets/handlers/ButtonHandler.hx",38,0xe2e7d32f)
namespace haxe{
namespace ui{
namespace backend{
namespace hxwidgets{
namespace handlers{

void ButtonHandler_obj::__construct( ::haxe::ui::components::Button button){
            	HX_STACKFRAME(&_hx_pos_00c8fd9a668debf3_17_new)
HXLINE(  18)		super::__construct(button);
HXLINE(  19)		this->_button = button;
            	}

Dynamic ButtonHandler_obj::__CreateEmpty() { return new ButtonHandler_obj; }

void *ButtonHandler_obj::_hx_vtable = 0;

Dynamic ButtonHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ButtonHandler_obj > _hx_result = new ButtonHandler_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ButtonHandler_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x053668ea) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x053668ea;
	} else {
		return inClassId==(int)0x70a0e439;
	}
}

void ButtonHandler_obj::link(){
            	HX_STACKFRAME(&_hx_pos_00c8fd9a668debf3_23_link)
HXDLIN(  23)		this->_component->get_window()->bind(::wx::widgets::EventType_obj::TOGGLEBUTTON,this->_hx___onToggleEvent_dyn(),null());
            	}


void ButtonHandler_obj::unlink(){
            	HX_STACKFRAME(&_hx_pos_00c8fd9a668debf3_27_unlink)
HXDLIN(  27)		this->_component->get_window()->unbind(::wx::widgets::EventType_obj::TOGGLEBUTTON,this->_hx___onToggleEvent_dyn(),null());
            	}


void ButtonHandler_obj::_hx___onToggleEvent( ::hx::widgets::Event event){
            	HX_GC_STACKFRAME(&_hx_pos_00c8fd9a668debf3_30___onToggleEvent)
HXLINE(  31)		 ::haxe::ui::components::ButtonGroups _hx_tmp = ::haxe::ui::components::ButtonGroups_obj::get_instance();
HXDLIN(  31)		 ::haxe::ui::components::Button _hx_tmp1 = ( ( ::haxe::ui::components::Button)(this->_component) );
HXDLIN(  31)		_hx_tmp->setSelection(_hx_tmp1,::hx::TCast<  ::hx::widgets::ToggleButton >::cast(this->_component->get_window())->get_value(),null());
HXLINE(  34)		 ::haxe::ui::events::MouseEvent clickEvent =  ::haxe::ui::events::MouseEvent_obj::__alloc( HX_CTX ,HX_("click",48,7c,5e,48));
HXLINE(  35)		this->_component->dispatch(clickEvent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ButtonHandler_obj,_hx___onToggleEvent,(void))

bool ButtonHandler_obj::applyStyle( ::haxe::ui::styles::Style style){
            	HX_STACKFRAME(&_hx_pos_00c8fd9a668debf3_38_applyStyle)
HXLINE(  39)		if (::hx::IsNotNull( style->icon )) {
HXLINE(  40)			this->_button->set_icon(style->icon);
            		}
HXLINE(  43)		 ::hx::widgets::AnyButton button = ::hx::TCast<  ::hx::widgets::AnyButton >::cast(this->_component->get_window());
HXLINE(  44)		{
HXLINE(  44)			::String _g = style->iconPosition;
HXDLIN(  44)			if (::hx::IsNull( _g )) {
HXLINE(  52)				button->set_bitmapPosition(wxLEFT);
            			}
            			else {
HXLINE(  44)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("bottom",eb,e6,78,65)) ){
HXLINE(  50)					button->set_bitmapPosition(wxBOTTOM);
HXDLIN(  50)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(  46)					button->set_bitmapPosition(wxRIGHT);
HXDLIN(  46)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(  48)					button->set_bitmapPosition(wxTOP);
HXDLIN(  48)					goto _hx_goto_4;
            				}
            				/* default */{
HXLINE(  52)					button->set_bitmapPosition(wxLEFT);
            				}
            				_hx_goto_4:;
            			}
            		}
HXLINE(  55)		if (::hx::IsNotNull( style->textAlign )) {
HXLINE(  56)			int alignStyle;
HXDLIN(  56)			::String _g1 = style->textAlign;
HXDLIN(  56)			if (::hx::IsNull( _g1 )) {
HXLINE(  56)				alignStyle = 0;
            			}
            			else {
HXLINE(  56)				::String _hx_switch_1 = _g1;
            				if (  (_hx_switch_1==HX_("left",07,08,b0,47)) ){
HXLINE(  56)					alignStyle = ::wx::widgets::styles::ButtonStyle_obj::LEFT;
HXDLIN(  56)					goto _hx_goto_5;
            				}
            				if (  (_hx_switch_1==HX_("right",dc,0b,64,e9)) ){
HXLINE(  56)					alignStyle = ::wx::widgets::styles::ButtonStyle_obj::RIGHT;
HXDLIN(  56)					goto _hx_goto_5;
            				}
            				/* default */{
HXLINE(  56)					alignStyle = 0;
            				}
            				_hx_goto_5:;
            			}
HXLINE(  61)			 ::hx::widgets::Window _hx_tmp = this->get_window();
HXDLIN(  61)			int _hx_tmp1 = this->get_window()->get_windowStyle();
HXDLIN(  61)			_hx_tmp->set_windowStyle(((_hx_tmp1 & ~((::wx::widgets::styles::ButtonStyle_obj::LEFT | ::wx::widgets::styles::ButtonStyle_obj::RIGHT))) | alignStyle));
            		}
HXLINE(  64)		return true;
            	}



::hx::ObjectPtr< ButtonHandler_obj > ButtonHandler_obj::__new( ::haxe::ui::components::Button button) {
	::hx::ObjectPtr< ButtonHandler_obj > __this = new ButtonHandler_obj();
	__this->__construct(button);
	return __this;
}

::hx::ObjectPtr< ButtonHandler_obj > ButtonHandler_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::components::Button button) {
	ButtonHandler_obj *__this = (ButtonHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ButtonHandler_obj), true, "haxe.ui.backend.hxwidgets.handlers.ButtonHandler"));
	*(void **)__this = ButtonHandler_obj::_hx_vtable;
	__this->__construct(button);
	return __this;
}

ButtonHandler_obj::ButtonHandler_obj()
{
}

void ButtonHandler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ButtonHandler);
	HX_MARK_MEMBER_NAME(_button,"_button");
	 ::haxe::ui::backend::hxwidgets::handlers::NativeHandler_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ButtonHandler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_button,"_button");
	 ::haxe::ui::backend::hxwidgets::handlers::NativeHandler_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ButtonHandler_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"link") ) { return ::hx::Val( link_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"unlink") ) { return ::hx::Val( unlink_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_button") ) { return ::hx::Val( _button ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"applyStyle") ) { return ::hx::Val( applyStyle_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__onToggleEvent") ) { return ::hx::Val( _hx___onToggleEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ButtonHandler_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_button") ) { _button=inValue.Cast<  ::haxe::ui::components::Button >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ButtonHandler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_button",91,73,57,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ButtonHandler_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::components::Button */ ,(int)offsetof(ButtonHandler_obj,_button),HX_("_button",91,73,57,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ButtonHandler_obj_sStaticStorageInfo = 0;
#endif

static ::String ButtonHandler_obj_sMemberFields[] = {
	HX_("_button",91,73,57,48),
	HX_("link",fa,17,b3,47),
	HX_("unlink",d3,1e,88,65),
	HX_("__onToggleEvent",e7,d5,27,88),
	HX_("applyStyle",e3,20,6f,2f),
	::String(null()) };

::hx::Class ButtonHandler_obj::__mClass;

void ButtonHandler_obj::__register()
{
	ButtonHandler_obj _hx_dummy;
	ButtonHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.backend.hxwidgets.handlers.ButtonHandler",2e,18,ab,d6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ButtonHandler_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ButtonHandler_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ButtonHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ButtonHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace backend
} // end namespace hxwidgets
} // end namespace handlers
