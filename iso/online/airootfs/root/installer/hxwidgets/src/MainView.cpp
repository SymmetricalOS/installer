// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Labels
#include <Labels.h>
#endif
#ifndef INCLUDED_MainView
#include <MainView.h>
#endif
#ifndef INCLUDED_haxe_ui_Toolkit
#include <haxe/ui/Toolkit.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentSurface
#include <haxe/ui/backend/ComponentSurface.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Label
#include <haxe/ui/components/Label.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_VBox
#include <haxe/ui/containers/VBox.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_CompositeStyleSheet
#include <haxe/ui/styles/CompositeStyleSheet.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ccbfe88b5f57bb1a_10_new,"MainView","new",0x67d70b50,"MainView.new","MainView.hx",10,0x21c1ce20)
HX_LOCAL_STACK_FRAME(_hx_pos_84cb5a54243b0f84_523_registerBehaviours,"MainView","registerBehaviours",0x5ebc3ae9,"MainView.registerBehaviours","haxe/ui/macros/Macros.hx",523,0x27866361)
HX_LOCAL_STACK_FRAME(_hx_pos_62c4266d3adc9f12_651_cloneComponent,"MainView","cloneComponent",0x3a00b4b0,"MainView.cloneComponent","haxe/ui/macros/helpers/ClassBuilder.hx",651,0x8cdaad7b)
HX_LOCAL_STACK_FRAME(_hx_pos_84cb5a54243b0f84_493_self,"MainView","self",0x77a0e29c,"MainView.self","haxe/ui/macros/Macros.hx",493,0x27866361)

void MainView_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ccbfe88b5f57bb1a_10_new)
HXLINE(  11)		super::__construct();
HXDLIN(  11)		{
HXLINE( 310)			::haxe::ui::Toolkit_obj::styleSheet->parse(HX_("\n\t\t* {\n\t\talign-self: center;\n\t\t}\n\t\t#title {\n\t\tfont-size: 20px;\n\t\twidth: 1280px;\n\t\theight: 45px;\n\t\t}\n\t",f5,4e,cd,21),HX_("user",4b,92,ad,4d),null());
HXLINE( 871)			 ::haxe::ui::containers::VBox c0 =  ::haxe::ui::containers::VBox_obj::__alloc( HX_CTX );
HXDLIN( 871)			 ::haxe::ui::components::Label c1 =  ::haxe::ui::components::Label_obj::__alloc( HX_CTX );
HXLINE(1111)			c1->set_id(HX_("title",98,15,3b,10));
HXLINE( 929)			c0->addComponent(c1);
HXLINE( 871)			 ::haxe::ui::components::Label c2 =  ::haxe::ui::components::Label_obj::__alloc( HX_CTX );
HXLINE(1111)			c2->set_id(HX_("welcomedesc",f3,5b,b3,e7));
HXLINE( 929)			c0->addComponent(c2);
HXLINE( 338)			this->addComponent(c0);
HXLINE(1111)			this->set_styleString(HX_("padding: 5px",26,83,a3,18));
HXLINE( 359)			this->bindingRoot = true;
HXLINE( 255)			this->welcomedesc = c2;
HXDLIN( 255)			this->title = c1;
            		}
HXLINE(  13)		this->title->set_text(::Labels_obj::main_title);
HXLINE(  14)		this->welcomedesc->set_text(::Labels_obj::main_welcomedesc);
            	}

Dynamic MainView_obj::__CreateEmpty() { return new MainView_obj; }

void *MainView_obj::_hx_vtable = 0;

Dynamic MainView_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainView_obj > _hx_result = new MainView_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MainView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2ccba775) {
		if (inClassId<=(int)0x13d76ae7) {
			if (inClassId<=(int)0x0f2dd418) {
				if (inClassId<=(int)0x01557b4b) {
					return inClassId==(int)0x00000001 || inClassId==(int)0x01557b4b;
				} else {
					return inClassId==(int)0x0f2dd418;
				}
			} else {
				return inClassId==(int)0x1395e371 || inClassId==(int)0x13d76ae7;
			}
		} else {
			if (inClassId<=(int)0x241b0321) {
				return inClassId==(int)0x241810fb || inClassId==(int)0x241b0321;
			} else {
				return inClassId==(int)0x2ccba775;
			}
		}
	} else {
		if (inClassId<=(int)0x715d6dae) {
			if (inClassId<=(int)0x4ba87886) {
				if (inClassId<=(int)0x32f63b82) {
					return inClassId==(int)0x2eb1d3e1 || inClassId==(int)0x32f63b82;
				} else {
					return inClassId==(int)0x4ba87886;
				}
			} else {
				return inClassId==(int)0x715d6dae;
			}
		} else {
			return inClassId==(int)0x72c347e4 || inClassId==(int)0x7ec24579;
		}
	}
}

void MainView_obj::registerBehaviours(){
            	HX_STACKFRAME(&_hx_pos_84cb5a54243b0f84_523_registerBehaviours)
HXDLIN( 523)		this->super::registerBehaviours();
            	}


 ::haxe::ui::core::ComponentContainer MainView_obj::cloneComponent(){
            	HX_STACKFRAME(&_hx_pos_62c4266d3adc9f12_651_cloneComponent)
HXLINE( 441)		 ::MainView c = ( ( ::MainView)(this->super::cloneComponent()) );
HXLINE( 456)		{
HXLINE( 457)			::Array< ::Dynamic> _hx_tmp;
HXDLIN( 457)			if (::hx::IsNull( this->_children )) {
HXLINE( 457)				_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 457)				_hx_tmp = this->_children;
            			}
HXDLIN( 457)			::Array< ::Dynamic> _hx_tmp1;
HXDLIN( 457)			if (::hx::IsNull( c->_children )) {
HXLINE( 457)				_hx_tmp1 = ::Array_obj< ::Dynamic>::__new(0);
            			}
            			else {
HXLINE( 457)				_hx_tmp1 = c->_children;
            			}
HXDLIN( 457)			if ((_hx_tmp->length != _hx_tmp1->length)) {
HXLINE( 458)				int _g = 0;
HXDLIN( 458)				::Array< ::Dynamic> _g1;
HXDLIN( 458)				if (::hx::IsNull( this->_children )) {
HXLINE( 458)					_g1 = ::Array_obj< ::Dynamic>::__new(0);
            				}
            				else {
HXLINE( 458)					_g1 = this->_children;
            				}
HXDLIN( 458)				while((_g < _g1->length)){
HXLINE( 458)					 ::haxe::ui::core::Component child = _g1->__get(_g).StaticCast<  ::haxe::ui::core::Component >();
HXDLIN( 458)					_g = (_g + 1);
HXLINE( 459)					c->addComponent(Dynamic( child->cloneComponent()).StaticCast<  ::haxe::ui::core::Component >());
            				}
            			}
HXLINE( 463)			this->postCloneComponent(( ( ::haxe::ui::core::Component)(c) ));
            		}
HXLINE( 465)		return c;
            	}


 ::haxe::ui::core::ComponentContainer MainView_obj::self(){
            	HX_GC_STACKFRAME(&_hx_pos_84cb5a54243b0f84_493_self)
HXDLIN( 493)		return  ::MainView_obj::__alloc( HX_CTX );
            	}



::hx::ObjectPtr< MainView_obj > MainView_obj::__new() {
	::hx::ObjectPtr< MainView_obj > __this = new MainView_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MainView_obj > MainView_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MainView_obj *__this = (MainView_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainView_obj), true, "MainView"));
	*(void **)__this = MainView_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MainView_obj::MainView_obj()
{
}

void MainView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainView);
	HX_MARK_MEMBER_NAME(welcomedesc,"welcomedesc");
	HX_MARK_MEMBER_NAME(title,"title");
	 ::haxe::ui::containers::Box_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(welcomedesc,"welcomedesc");
	HX_VISIT_MEMBER_NAME(title,"title");
	 ::haxe::ui::containers::Box_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainView_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"self") ) { return ::hx::Val( self_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return ::hx::Val( title ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"welcomedesc") ) { return ::hx::Val( welcomedesc ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cloneComponent") ) { return ::hx::Val( cloneComponent_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"registerBehaviours") ) { return ::hx::Val( registerBehaviours_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MainView_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast<  ::haxe::ui::components::Label >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"welcomedesc") ) { welcomedesc=inValue.Cast<  ::haxe::ui::components::Label >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MainView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("welcomedesc",f3,5b,b3,e7));
	outFields->push(HX_("title",98,15,3b,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainView_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::components::Label */ ,(int)offsetof(MainView_obj,welcomedesc),HX_("welcomedesc",f3,5b,b3,e7)},
	{::hx::fsObject /*  ::haxe::ui::components::Label */ ,(int)offsetof(MainView_obj,title),HX_("title",98,15,3b,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MainView_obj_sStaticStorageInfo = 0;
#endif

static ::String MainView_obj_sMemberFields[] = {
	HX_("registerBehaviours",d9,a7,67,34),
	HX_("cloneComponent",a0,e9,56,26),
	HX_("self",8c,8b,50,4c),
	HX_("welcomedesc",f3,5b,b3,e7),
	HX_("title",98,15,3b,10),
	::String(null()) };

::hx::Class MainView_obj::__mClass;

void MainView_obj::__register()
{
	MainView_obj _hx_dummy;
	MainView_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MainView",5e,63,83,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainView_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainView_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainView_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

