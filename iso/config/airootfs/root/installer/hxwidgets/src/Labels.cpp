// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Branding
#include <Branding.h>
#endif
#ifndef INCLUDED_Labels
#include <Labels.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_035599f5d83e583e_4_boot,"Labels","boot",0xb33346e1,"Labels.boot","Labels.hx",4,0x1478c3ff)
HX_LOCAL_STACK_FRAME(_hx_pos_035599f5d83e583e_5_boot,"Labels","boot",0xb33346e1,"Labels.boot","Labels.hx",5,0x1478c3ff)
HX_LOCAL_STACK_FRAME(_hx_pos_035599f5d83e583e_6_boot,"Labels","boot",0xb33346e1,"Labels.boot","Labels.hx",6,0x1478c3ff)
HX_LOCAL_STACK_FRAME(_hx_pos_035599f5d83e583e_7_boot,"Labels","boot",0xb33346e1,"Labels.boot","Labels.hx",7,0x1478c3ff)
HX_LOCAL_STACK_FRAME(_hx_pos_035599f5d83e583e_9_boot,"Labels","boot",0xb33346e1,"Labels.boot","Labels.hx",9,0x1478c3ff)
HX_LOCAL_STACK_FRAME(_hx_pos_035599f5d83e583e_10_boot,"Labels","boot",0xb33346e1,"Labels.boot","Labels.hx",10,0x1478c3ff)

void Labels_obj::__construct() { }

Dynamic Labels_obj::__CreateEmpty() { return new Labels_obj; }

void *Labels_obj::_hx_vtable = 0;

Dynamic Labels_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Labels_obj > _hx_result = new Labels_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Labels_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x45a96343;
}

::String Labels_obj::common_back;

::String Labels_obj::common_next;

::String Labels_obj::common_cancel;

::String Labels_obj::common_finish;

::String Labels_obj::main_title;

::String Labels_obj::main_welcomedesc;


Labels_obj::Labels_obj()
{
}

bool Labels_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"main_title") ) { outValue = ( main_title ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"common_back") ) { outValue = ( common_back ); return true; }
		if (HX_FIELD_EQ(inName,"common_next") ) { outValue = ( common_next ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"common_cancel") ) { outValue = ( common_cancel ); return true; }
		if (HX_FIELD_EQ(inName,"common_finish") ) { outValue = ( common_finish ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"main_welcomedesc") ) { outValue = ( main_welcomedesc ); return true; }
	}
	return false;
}

bool Labels_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"main_title") ) { main_title=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"common_back") ) { common_back=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"common_next") ) { common_next=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"common_cancel") ) { common_cancel=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"common_finish") ) { common_finish=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"main_welcomedesc") ) { main_welcomedesc=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Labels_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Labels_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Labels_obj::common_back,HX_("common_back",fb,e4,c3,58)},
	{::hx::fsString,(void *) &Labels_obj::common_next,HX_("common_next",c7,8f,b5,60)},
	{::hx::fsString,(void *) &Labels_obj::common_cancel,HX_("common_cancel",4e,55,de,6a)},
	{::hx::fsString,(void *) &Labels_obj::common_finish,HX_("common_finish",27,a8,29,39)},
	{::hx::fsString,(void *) &Labels_obj::main_title,HX_("main_title",d2,05,3a,2d)},
	{::hx::fsString,(void *) &Labels_obj::main_welcomedesc,HX_("main_welcomedesc",ad,33,63,62)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Labels_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Labels_obj::common_back,"common_back");
	HX_MARK_MEMBER_NAME(Labels_obj::common_next,"common_next");
	HX_MARK_MEMBER_NAME(Labels_obj::common_cancel,"common_cancel");
	HX_MARK_MEMBER_NAME(Labels_obj::common_finish,"common_finish");
	HX_MARK_MEMBER_NAME(Labels_obj::main_title,"main_title");
	HX_MARK_MEMBER_NAME(Labels_obj::main_welcomedesc,"main_welcomedesc");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Labels_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Labels_obj::common_back,"common_back");
	HX_VISIT_MEMBER_NAME(Labels_obj::common_next,"common_next");
	HX_VISIT_MEMBER_NAME(Labels_obj::common_cancel,"common_cancel");
	HX_VISIT_MEMBER_NAME(Labels_obj::common_finish,"common_finish");
	HX_VISIT_MEMBER_NAME(Labels_obj::main_title,"main_title");
	HX_VISIT_MEMBER_NAME(Labels_obj::main_welcomedesc,"main_welcomedesc");
};

#endif

::hx::Class Labels_obj::__mClass;

static ::String Labels_obj_sStaticFields[] = {
	HX_("common_back",fb,e4,c3,58),
	HX_("common_next",c7,8f,b5,60),
	HX_("common_cancel",4e,55,de,6a),
	HX_("common_finish",27,a8,29,39),
	HX_("main_title",d2,05,3a,2d),
	HX_("main_welcomedesc",ad,33,63,62),
	::String(null())
};

void Labels_obj::__register()
{
	Labels_obj _hx_dummy;
	Labels_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Labels",1f,9c,11,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Labels_obj::__GetStatic;
	__mClass->mSetStaticField = &Labels_obj::__SetStatic;
	__mClass->mMarkFunc = Labels_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Labels_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Labels_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Labels_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Labels_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Labels_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Labels_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_035599f5d83e583e_4_boot)
HXDLIN(   4)		common_back = HX_("Back",47,06,ea,2b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_035599f5d83e583e_5_boot)
HXDLIN(   5)		common_next = HX_("Next",13,b1,db,33);
            	}
{
            	HX_STACKFRAME(&_hx_pos_035599f5d83e583e_6_boot)
HXDLIN(   6)		common_cancel = HX_("Cancel",9a,61,c8,ec);
            	}
{
            	HX_STACKFRAME(&_hx_pos_035599f5d83e583e_7_boot)
HXDLIN(   7)		common_finish = HX_("Finish",73,b4,13,bb);
            	}
{
            	HX_STACKFRAME(&_hx_pos_035599f5d83e583e_9_boot)
HXDLIN(   9)		main_title = ((HX_("Welcome to the ",b6,31,f9,5c) + ::Branding_obj::versionedName) + HX_(" installer",28,e6,1d,53));
            	}
{
            	HX_STACKFRAME(&_hx_pos_035599f5d83e583e_10_boot)
HXDLIN(  10)		main_welcomedesc = ((HX_("This program will guide you through the ",1f,be,90,84) + ::Branding_obj::shortName) + HX_(" installation process.",e5,c7,62,68));
            	}
}

